!<arch>
0-isupper.c/    0           0     0     644     130       `
#include "main.h"

/**
 * _isupper - func
 * @c: var 1
 * Return: va;
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}
0-memset.c/     0           0     0     644     229       `
#include "main.h"
/**
 * _memset - main function
 * @s: v
 * @b: s
 * @n: num
 * Return: 0
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	i = 0;
	while (i < n)
	{
		*(s + i) = b;
		i++;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     378       `
#include "main.h"
#include <stdio.h>

/**
 * *_strcat - function
 * @dest: var 1
 * @src: done
 * Return: value
 */

char *_strcat(char *dest, char *src)
{
	int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
		count++;

	while (count2 >= 0)
	{
		*(dest + count) = *(src + count2);
		if (*(src + count2) == '\0')
			break;
		count++;
		count2++;
	}
	return (dest);
}


100-atoi.c/     0           0     0     644     312       `
#include "main.h"

/**
 * _atoi - func
 * @s: var 1
 * Return: 0
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
		sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;

	} while (*s++);

	return (num * sign);
}


1-isdigit.c/    0           0     0     644     193       `
#include "main.h"

/**
 * _isdigit - func
 * @c: var 1
 * Return: value 0
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

1-memcpy.c/     0           0     0     644     293       `
#include "main.h"
/**
 * _memcpy - func
 * @dest: 1
 * @src: 2
 * @n: v
 * Return: 0
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;
	char *csrc = (char *)src;
	char *cdest = (char *)dest;

	while (i < n)
	{
		cdest[i] = csrc[i];
		i++;
	}
	return (dest);
}




1-strncat.c/    0           0     0     644     328       `
#include "main.h"
/**
 * _strncat - main
 * @dest: var 1
 * @src: svar 2
 * @n: numbers
 * Return: 0
 */

char *_strncat(char *dest, char *src, int n)
{
	int x  = 0, y = 0;

	while (*(dest + x) != '\0')
		x++;

	while (y < n)
	{
		*(dest + x) = *(src + y);
		if (*(src + y) == '\0')
			break;
		x++;
		y++;
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     265       `
#include "main.h"

/**
 * _strchr - main func
 * @s: sd
 * @c: first c
 * Return: 0
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	while (i < 100)
	{
		if (*(s + i) == c)
		{
			return (s + i);
		}
			i++;
	}
	if (*(s + i) == c)
	return (s + i);
	return (0);
}

2-strlen.c/     0           0     0     644     211       `
#include "main.h"
#include <stdio.h>
#include <string.h>
/**
 * _strlen - main function
 * @s: var 1
 * @y: var 2
 * Return: 0
 */
int _strlen(char *s)
{
	int y = 0;

	while (*s++ != '\0')
		y++;
	return (y);
}

2-strncpy.c/    0           0     0     644     284       `
#include "main.h"
/**
 * _strncpy - main func
 * @dest: var 1
 * @src: var 2
 * @n: num
 * Return: 0
 */


char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}
3-islower.c/    0           0     0     644     173       `
#include "main.h"
/**
 * _islower -new function
 * @l: comm
 * Return: 0
 */
int _islower(int l)
{
	if (l >= 97 && l <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     149       `
#include "main.h"
#include <stdio.h>
/**
 * _puts - main function
 * @s: var
 * @str: another var
 *
 */
void _puts(char *s)
{
	printf("%s\n", s);
}

3-strcmp.c/     0           0     0     644     279       `
#include "main.h"
/**
 * _strcmp - main func
 * @s2: var 1
 * @s1: var 2
 * Return: 0
 */


int _strcmp(char *s1, char *s2)
{
	int i = 0, x = 0;

	while (x == 0)
	{
		if ((*(s1 + i) == '\0') && (*(s2 + i) == '\0'))
			break;
		x = *(s1 + i) - *(s2 + i);
		i++;
	}
	return (x);
}

3-strspn.c/     0           0     0     644     304       `
#include "main.h"

/**
 * _strspn - main
 * @s: var 1
 * @accept: var 2
 * Return: c
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
				break;
		}
		if (!accept[j])
			break;
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     233       `
#include "main.h"
/**
 * _isalpha - function
 * @l: description
 * Return: 0
 * /
 */
int _isalpha(int l)
{
	if (l >= 65 && l <= 122)
	{
		return (1);
	}
	else if (l >= 97 && l <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     303       `
#include "main.h"

/**
 * _strpbrk - main
 * @s: str
 * @accept: acc
 * Return: d
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
				break;
		}
		if (accept[j])
			return (s + i);
	}
	return (0);
}

5-strstr.c/     0           0     0     644     410       `
#include "main.h"

/**
 * _strstr - main
 * @haystack: var1
 * @needle: dasd
 * Return: 0
 */
char *_strstr(char *haystack, char *needle)
{
	unsigned int i = 0, j = 0;

	while (haystack[i])
	{
		while (needle[j] && (haystack[i] == needle[0]))
		{
			if (haystack[i + j] == needle[j])
				j++;
			else
				break;
		}
		if (needle[j])
		{
			i++;
			j = 0;
		}
		else
			return (haystack + i);
	}
	return (0);
}
6-abs.c/        0           0     0     644     160       `
#include "main.h"
/**
 * _abs - function
 * @x: variable
 * Return: 0
 */

int _abs(int x)
{
	if (x >= 0)
	{
		return (x);
	}
	else
	{
		return (x * -1);
	}
}

9-strcpy.c/     0           0     0     644     258       `
#include "main.h"

/**
 * *_strcpy - func
 * @dest: first
 * @src: second
 * Return: 0
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	i = 0;

	while (i >= 0)
	{
		dest[i] = src[i];

		if (src[i] == '\0')
			return (dest);
		i++;
	}
	return (dest);
}

_putchar.c/     0           0     0     644     128       `
#include <unistd.h>

/**
 * _putchar - func
 * @c: var
 * Return: val 0
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
strncat.c/      0           0     0     644     50        `
char *_strncat(char *dest, char *src, int n)
{
}

